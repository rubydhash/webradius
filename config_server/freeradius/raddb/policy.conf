# -*- text -*-
##
## policy.conf	-- FreeRADIUS server configuration file.
##
##	http://www.freeradius.org/
##	$Id$
##

#
#  Policies are virtual modules, similar to those defined in the
#  "instantate" section of radiusd.conf.
#
#  Defining a policy here means that it can be referenced in multiple
#  places as a *name*, rather than as a series of conditions to match,
#  and actions to take.
#
#  Policies are something like subroutines in a normal language, but
#  they cannot be called recursively.  They MUST be defined in order.
#  If policy A calls policy B, then B MUST be defined before A.
#
policy {
	#
	#	Forbid all EAP types.
	#
	forbid_eap {
		if (EAP-Message) {
			reject
		}
	}

	#
	#	Forbid all non-EAP types outside of an EAP tunnel.
	#
	permit_only_eap {
		if (!EAP-Message) {
			#  We MAY be inside of a TTLS tunnel.
			#  PEAP and EAP-FAST require EAP inside of
			#  the tunnel, so this check is OK.
			#  If so, then there MUST be an outer EAP message.
			if (!"%{outer.request:EAP-Message}") {
				reject
			}
		}
	}

	#
	#	Forbid all attempts to login via realms.
	#
	deny_realms {
		if (User-Name =~ /@|\\/) {
			reject
		}
	}

  # Strip domain from username
  # Formats: domain\\username
  #          username@domain
  strip_off_domain {
    if (User-Name =~ /^(.*)\\(.*)/) {
      update request {
        User-Name := "%{2}"
      }
      update control {
        Prefix = "%{1}"
      }
    }
    if (User-Name =~ /^(.*)@(.*)/) {
      update request {
        User-Name := "%{1}"
      }
      update control {
        Suffix = "%{2}"
      }
    }
  }

  # Checa se quem autenticou usando o realm admins esta no grupo ADMIN
  check_admin {
    if ("%{%{control:Suffix}:-%{control:Prefix}}" == "admins") {
      if (Ldap-Group == ADMIN) {
        ok
      }
      else {
        reject
      }
    }
  }

	#
	#	If you want the server to pretend that it is dead,
	#	then use the "do_not_respond" policy.
	#
	do_not_respond {
		update control {
			Response-Packet-Type := Do-Not-Respond
		}

		handled
	}

	#
	#  Force some sanity on User-Name.  This helps to avoid issues
	#  issues where the back-end database is "forgiving" about
	#  what constitutes a user name.
	#
	filter_username {
		#
		#  reject mixed case
		#  e.g. "UseRNaMe"
		#
		if (User-Name != "%{tolower:%{User-Name}}") {
			reject
		}

		#
		#  reject all whitespace
		#  e.g. "user@ site.com", or "us er", or " user", or "user "
		#
		if (User-Name =~ / /) {
			update reply {
				Reply-Message += "Rejected: Username contains whitespace"
			}
			reject
		}

		#
		#  reject Multiple @'s
		#  e.g. "user@site.com@site.com"
		#
		if(User-Name =~ /@(.+)?@/i ) {
			update reply {
				Reply-Message += "Rejected: Multiple @ in username"
			}
			reject
		}

		#
		#  reject double dots
		#  e.g. "user@site..com"
		#
		if (User-Name =~ /\\.\\./ ) {
			update reply {
				Reply-Message += "Rejected: Username comtains ..s"
			}
			reject
		}

		#
		#  must have at least 1 string-dot-string after @
		#  e.g. "user@site.com"
		#
		if (User-Name !~ /@(.+)\\.(.+)$/)  {
			update reply {
				Reply-Message += "Rejected: Realm does not have at least one dot seperator"
			}
			reject
		}

		#
		#  Realm ends with a dot
		#  e.g. "user@site.com."
		#
		if (User-Name =~ /\\.$/)  {
			update reply {
				Reply-Message += "Rejected: Realm ends with a dot"
			}
			reject
		}

		#
		#  Realm begins with a dot
		#  e.g. "user@.site.com"
		#
		if (User-Name !~ /@\\./)  {
			update reply {
				Reply-Message+ = "Rejected: Realm begins with a dot"
			}
			reject
		}
	}

	#	
	#  The following policies are for the Chargeable-User-Identity
	#  (CUI) configuration.
	#

	#
	#  The client indicates it can do CUI by sending a CUI attribute	
	#  containing one zero byte
	#
	cui_authorize {
		update request {
			Chargeable-User-Identity:='\\000'
		}
	}

	#
	#  Add a CUI attribute based on the User-Name, and a secret key
	#  known only to this server.
	#
	cui_postauth {
		if (FreeRadius-Proxied-To == 127.0.0.1) {
			if (outer.request:Chargeable-User-Identity) {
				update outer.reply {
					Chargeable-User-Identity:="%{md5:%{config:cui_hash_key}%{User-Name}}"
				}
			}
		}
		else {
			if (Chargeable-User-Identity) {
				update reply {
					Chargeable-User-Identity="%{md5:%{config:cui_hash_key}%{User-Name}}"
				}
			}
		}
	}

	#
	#  If there is a CUI attribute in the reply, add it to the DB.
	#
	cui_updatedb {
		if (reply:Chargeable-User-Identity) {
			cui
		}
	}

	#
	#  If we had stored a CUI for the User, add it to the request.
	#
	cui_accounting {
		#
		#  If the CUI isn't in the packet, see if we can find it
		#  in the DB.
		#
		if (!Chargeable-User-Identity) {
			update request {
				Chargeable-User-Identity := "%{cui: SELECT cui FROM cui WHERE clientipaddress = '%{Client-IP-Address}' AND callingstationid = '%{Calling-Station-Id}' AND username = '%{User-Name}'}"
			}
		}

		#
		#  If it exists now, then write out when we last saw
		#  this CUI.
		#
		if (Chargeable-User-Identity && (Chargeable-User-Identity != "")) {
			cui
		}
	}

	#
	#  Normalize the MAC Addresses in the Calling/Called-Station-Id
	#
	mac-addr = ([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})[^0-9a-f]?([0-9a-f]{2})

	#  Add "rewrite.called_station_id" in the "authorize" and "preacct"
	#  sections.
	rewrite.called_station_id {
		if((Called-Station-Id) && "%{Called-Station-Id}" =~ /^%{config:policy.mac-addr}(:(.+))?$/i) {
			update request {
				Called-Station-Id := "%{tolower:%{1}-%{2}-%{3}-%{4}-%{5}-%{6}}"
			}

			# SSID component?
			if ("%{8}") {
				update request {
					Called-Station-Id := "%{Called-Station-Id}:%{8}"
				}
			}
			updated
		}
		else {
			noop
		}
	}

	#  Add "rewrite.calling_station_id" in the "authorize" and "preacct"
	#  sections.
	rewrite.calling_station_id {
		if((Calling-Station-Id) && "%{Calling-Station-Id}" =~ /^%{config:policy.mac-addr}$/i) {
			update request {
				Calling-Station-Id := "%{tolower:%{1}-%{2}-%{3}-%{4}-%{5}-%{6}}"
			}
			updated
		}
		else {
			noop
		}
	}

	#  Ajusta o username se for um MAC
	rewrite.username {
		if((User-Name) && "%{User-Name}" =~ /^%{config:policy.mac-addr}$/i) {
			update request {
				User-Name := "%{tolower:%{1}-%{2}-%{3}-%{4}-%{5}-%{6}}"
			}
			updated
		}
		else {
			noop
		}
	}

	dhcp_sqlippool.adjust-request {
	    # Seta o calling stationid e normaliza ele no formato usado no banco
		update request {
			Calling-Station-Id = "%{DHCP-Client-Hardware-Address}"
		}

    	rewrite.calling_station_id

		# Ajusta os atributos de tal forma que o modulo dhcp_sqlippol funcione
		update request {
			User-Name = "DHCP-%{Calling-Station-Id}"
			NAS-IP-Address = "%{%{DHCP-Gateway-IP-Address}:-127.0.0.1}"
			Acct-Status-Type = Start
		}
	}

	# Checa se o usuario tem algum Pool associado, se tiver seta o atributo de controle Pool-Name
	dhcp_sqlippool.check-pool {
		# Se o ciaddr for diferente de 0.0.0.0 indica que o cliente está renovando ou dando um rebind,
		# nesse caso temos que determinar o pool do cliente com base no lease do mesmo que
		# é guardado na tabela radippool
		if (request:DHCP-Client-IP-Address != 0.0.0.0) {
			# Gateway == 0.0.0.0 é renovação
			if (request:DHCP-Gateway-IP-Address == 0.0.0.0) {
				if("%{sql: SELECT pool_count_by_ippool('%{DHCP-Client-IP-Address}', '%{Calling-Station-Id}')}" != "0") {
					update control {
						Pool-Name := "%{sql: SELECT pool_name_by_ippool('%{DHCP-Client-IP-Address}', '%{Calling-Station-Id}')}"
					}
				}
				else {
					notfound
				}
			}
			# Gateway != 0.0.0.0 é rebind
			else {
				if("%{sql: SELECT pool_count_by_ippool_rebind('%{DHCP-Client-IP-Address}', '%{Calling-Station-Id}', '%{DHCP-Gateway-IP-Address}')}" != "0") {
					update control {
						Pool-Name := "%{sql: SELECT pool_name_by_ippool_rebind('%{DHCP-Client-IP-Address}', '%{Calling-Station-Id}', '%{DHCP-Gateway-IP-Address}')}"
					}
				}
				else {
					# Rebind invalido tem que mandar via broadcast
					# Não pode ter o IP setado
					update request {
						DHCP-Client-IP-Address !* 'nao-interessa-o-valor'
					}
					# Seta flag de broadcast senão o Windows não reconhece
					update reply {
						DHCP-Flags = Broadcast 
					}
					
					notfound
				}
			}
		}
		# Pode ser uma renovação via broadcast também, nesse caso o IP vem designado no campo DHCP-Requested-IP-Address 
		elsif (request:DHCP-Message-Type == DHCP-Request && request:DHCP-Requested-IP-Address != 0.0.0.0 && request:DHCP-Gateway-IP-Address != 0.0.0.0) {
			if("%{sql: SELECT pool_count_by_ippool_rebind('%{DHCP-Requested-IP-Address}', '%{Calling-Station-Id}', '%{DHCP-Gateway-IP-Address}')}" != "0") {
				update control {
					Pool-Name := "%{sql: SELECT pool_name_by_ippool_rebind('%{DHCP-Requested-IP-Address}', '%{Calling-Station-Id}', '%{DHCP-Gateway-IP-Address}')}"
				}
			}
			else {
				# Seta flag de broadcast senão o Windows não reconhece
				update reply {
					DHCP-Flags = Broadcast
				}
				
				notfound
			}
		}
		else {
			# Tenta achar o pool com base no MAC
			if("%{sql: SELECT pool_count('%{Calling-Station-Id}')}" != "0") {
				update control {
					Pool-Name := "%{sql: SELECT pool_name('%{Calling-Station-Id}')}"
				}
			
				# O gateway tem que estar na subrede do pool, senao busca o Pool com base no gateway
				if ("%{sql: SELECT pool_gateway_on_subnet('%{DHCP-Gateway-IP-Address}', '%{control:Pool-Name}')}" == "0") {
					# Remove o valor presente na variavel 'Pool-name'
					update control {
						Pool-Name !* 'nao-interessa-o-valor'
					}
					
					if("%{sql: SELECT pool_count_by_router('%{DHCP-Gateway-IP-Address}')}" != "0") {
						update control {
							Pool-Name := "%{sql: SELECT pool_name_by_router('%{DHCP-Gateway-IP-Address}')}"
						}
					}
					else {
						notfound
					}
				}
			}
			else {
				# Se nao achou pool associado ao MAC tenta pelos bind gateways
				if("%{sql: SELECT pool_count_by_gw('%{DHCP-Gateway-IP-Address}')}" != "0") {
					# Seleciona o Pool adequado para o usuario.
					update control {
						Pool-Name := "%{sql: SELECT pool_name_by_gw('%{DHCP-Gateway-IP-Address}')}"
					}
				}
				else {
					notfound
				}
			}
		}
	}

	dhcp_sqlippool.fill-static-reply {
		# Preenche todos os atributos de resposta estáticos
		update reply {
			DHCP-DHCP-Server-Identifier = IPSERVIDOR
		}
	}

	# Pega o lease pois ele e' necessario para alocar o IP
	dhcp_sqlippool.get-lease {
		update reply {
			DHCP-IP-Address-Lease-Time !* 'nao-interessa-o-valor'
			DHCP-IP-Address-Lease-Time = "%{sql: SELECT pool_lease_time('%{control:Pool-Name}')}"
		}
	}

	# Seta um lease estatico de 1 minuto para ser usado na oferta de IP, depois desse 1 minuto se o cliente nao
	# fizer um request nesse 1 minuto o IP estara liberado
	dhcp_sqlippool.get-offer-lease {
		update reply {
			DHCP-IP-Address-Lease-Time !* 'nao-interessa-o-valor'
			DHCP-IP-Address-Lease-Time = "60"
		}
	}

	# Preenche os atributos da resposta a requisicao DHCP
	dhcp_sqlippool.fill-reply {
		# Inclui uma serie de atributos na resposta baseado nos dados da tabela de informacoes do pool
		update reply {
			# Busca os atributos ques podem ser NULL no banco e seta valores padores para o caso de serem nulos
			DHCP-Domain-Name-Server = "%{%{sql: SELECT pool_dns_server2('%{control:Pool-Name}')}:-0.0.0.0}"
			DHCP-Domain-Name = "%{%{sql: SELECT pool_domain_name('%{control:Pool-Name}')}:-nulo}"
			DHCP-NETBIOS-Name-Servers = "%{%{sql: SELECT pool_netbios_name_server2('%{control:Pool-Name}')}:-0.0.0.0}"
			DHCP-NETBIOS = "%{%{sql: SELECT pool_netbios('%{control:Pool-Name}')}:-nulo}"
			DHCP-Interface-MTU-Size = "%{%{sql: SELECT pool_mtu('%{control:Pool-Name}')}:-0}"
			DHCP-NTP-Servers = "%{%{sql: SELECT pool_ntp_server('%{control:Pool-Name}')}:-0.0.0.0}"

			# Atributos para funcionar o PXE
			DHCP-Boot-Filename = "%{%{sql: SELECT pool_boot_filename('%{control:Pool-Name}')}:-nulo}"
			DHCP-Root-Path = "%{%{sql: SELECT pool_root_path('%{control:Pool-Name}')}:-nulo}"
			DHCP-Server-IP-Address = "%{%{sql: SELECT pool_next_server('%{control:Pool-Name}')}:-0.0.0.0}"
			# Esse atributo abaixo nao é necessário a principio
			#DHCP-TFTP-Server-Name = drbl
		}

		# Como os parametros nao podem ser nulos eu testo os que ficaram nulos e retiro eles
		if (reply:DHCP-Domain-Name-Server == 0.0.0.0) {
			update reply {
				DHCP-Domain-Name-Server !* 'nao-interessa-o-valor'
			}
		}
		if (reply:DHCP-Domain-Name == 'nulo') {
			update reply {
				DHCP-Domain-Name !* 'nao-interessa-o-valor'
			}
		}
		if (reply:DHCP-NETBIOS-Name-Servers == 0.0.0.0) {
			update reply {
				DHCP-NETBIOS-Name-Servers !* 'nao-interessa-o-valor'
			}
		}
		if (reply:DHCP-NETBIOS == 'nulo') {
			update reply {
				DHCP-NETBIOS !* 'nao-interessa-o-valor'
			}
		}
		if (reply:DHCP-Interface-MTU-Size == 0) {
			update reply {
				DHCP-Interface-MTU-Size !* 'nao-interessa-o-valor'
			}
		}
		if (reply:DHCP-NTP-Servers == 0.0.0.0) {
			update reply {
				DHCP-NTP-Servers !* 'nao-interessa-o-valor'
			}
		}
		if (reply:DHCP-Server-IP-Address == 0.0.0.0) {
			update reply {
				DHCP-Server-IP-Address !* 'nao-interessa-o-valor'
			}
		}
		if (reply:DHCP-Boot-Filename == 'nulo') {
			update reply {
				DHCP-Boot-Filename !* 'nao-interessa-o-valor'
			}
		}
		if (reply:DHCP-Root-Path == 'nulo') {
			update reply {
				DHCP-Root-Path !* 'nao-interessa-o-valor'
			}
		}

		# Caso especial do netbios name server, onde os dois valores podem ser deixados em branco
		update reply {
			DHCP-NETBIOS-Name-Servers += "%{%{sql: SELECT pool_netbios_name_server('%{control:Pool-Name}')}:-0.0.0.0}"
		}
		
		if (reply:DHCP-NETBIOS-Name-Servers == 0.0.0.0) {
			update reply {
				DHCP-NETBIOS-Name-Servers !* 'nao-interessa-o-valor'
			}
		}
		else {
			update reply {
				DHCP-NETBIOS-Node-Type = "%{%{sql: SELECT pool_netbios_node_type('%{control:Pool-Name}')}:-1}"
			}
		}

		# Esses atributos sao NOT NULL portanto nao tenho que definir valores padores caso o sql falhe
		update reply {
			DHCP-Subnet-Mask = "%{sql: SELECT pool_mask('%{control:Pool-Name}')}"
			DHCP-Router-Address = "%{sql: SELECT pool_router_address('%{control:Pool-Name}')}"
			# O operador nessa atribuicao e diferente para acumular os dois dns se os dois estiverem setados
			DHCP-Domain-Name-Server += "%{sql: SELECT pool_dns_server('%{control:Pool-Name}')}"
		}
	}

	#  Assign compatibility data to request for sqlippool
	dhcp_sqlippool.post-auth {
		#  Call the actual module
		#
		#  Uncomment this in order to really call it!
		dhcp_sqlippool

		#  Convert Framed-IP-Address to DHCP, but only if we
		#  actually allocated an address.
		if (ok) {
			update reply {
				DHCP-Your-IP-Address = "%{reply:Framed-IP-Address}"
			}
		}
		else {
			update reply {
				DHCP-Your-IP-Address = "0.0.0.0"
			}
		}
	}
}
